AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Arquitectura basica: VPC con subred publica (Web Server) y privada (RDS MySQL),
   con NAT Gateway y reglas de seguridad m?nimas.

# Parametros
Parameters:

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Nombre de la KeyPair para acceder por SSH al Web Server

  DBMasterUser:
    Type: String
    Default: admin
    Description: Usuario maestro de la base de datos MySQL

  DBMasterPassword:
    Type: String
    NoEcho: true
    MinLength: '8'
    Description: Contrasena del usuario maestro (Mas de 8 caracteres, incluir
      mayasculas y numeros)

  AuditBucketName:
    Type: String
    Description: Nombre del bucket S3 central de auditoria y logs

# Recursos
Resources:
  AWSBackupRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSBackupServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: backup.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSBackupFullAccess

  # Sistema de archivos EFS
  MyEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Name
          Value: TFG-EFS

  # Mount Targets en subredes privadas
  EFSMountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref MyEFS
      SubnetId: !Ref SubnetPrivadaA
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSMountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref MyEFS
      SubnetId: !Ref SubnetPrivadaB
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Seguridad para EFS
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref WebServerSG

  # AWS Backup Vault
  BackupVault:
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: TFGBackupVault

  # Backup Plan
  BackupPlan:
    Type: AWS::Backup::BackupPlan
    Properties:
      BackupPlan:
        BackupPlanName: TFG-EFS-BackupPlan
        BackupPlanRule:
          - RuleName: DailyBackups
            TargetBackupVault: !Ref BackupVault
            ScheduleExpression: cron(0 5 * * ? *)
            StartWindowMinutes: 60
            CompletionWindowMinutes: 180
            Lifecycle:
              DeleteAfterDays: 30

  BackupSelection:
    Type: AWS::Backup::BackupSelection
    Properties:
      BackupPlanId: !Ref BackupPlan
      BackupSelection:
        SelectionName: EFSSelection
        IamRoleArn: !GetAtt AWSBackupRole.Arn
        Resources:
          - !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${MyEFS}
          - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${MySQLDatabase}

  InstanceSSMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2SSMRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceSSMRole
      InstanceProfileName: EC2InstanceProfile

  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: TFG-VPC

  # Internet Gateway y attach
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  SubnetPublicaA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: eu-west-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicA

  SubnetPublicaB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: eu-west-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicB

  # Subred privada
  SubnetPrivadaA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: eu-west-1a
      Tags:
        - Key: Name
          Value: PrivateA

  SubnetPrivadaB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: eu-west-1b
      Tags:
        - Key: Name
          Value: PrivateB

  SubnetPrivadaC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: eu-west-1a
      Tags:
        - Key: Name
          Value: PrivateC

  SubnetPrivadaD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: eu-west-1b
      Tags:
        - Key: Name
          Value: PrivateD

  # Tabla de rutas publica
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicaA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicaB
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway + EIP para la subred privada
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref SubnetPublicaA
      Tags:
        - Key: Name
          Value: NATGateway

  # Tabla de rutas privada
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivadaA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivadaB
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableCAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivadaC
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableDAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivadaD
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups 
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite SSH (22) y HTTP (80) desde Internet
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSG
      Tags:
        - Key: Name
          Value: WebServerSG

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG para el Load Balancer
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSG

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WebALB
      Subnets:
        - !Ref SubnetPublicaA
        - !Ref SubnetPublicaB
      SecurityGroups:
        - !Ref LoadBalancerSG
      Scheme: internet-facing
      Type: application

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite MySQL desde el SG del Web Server
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSG
      Tags:
        - Key: Name
          Value: DBSecurityGroup

  # Web Server (EC2) 
  WebServerInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref SubnetPrivadaA
      SecurityGroupIds:
        - !Ref WebServerSG
      ImageId: ami-0152ea7e79f25bb5b
      Tags:
        - Key: Name
          Value: WebServer1
      IamInstanceProfile: !Ref InstanceProfile

  WebServerInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      SubnetId: !Ref SubnetPrivadaB
      SecurityGroupIds:
        - !Ref WebServerSG
      ImageId: ami-0152ea7e79f25bb5b
      Tags:
        - Key: Name
          Value: WebServer2
      IamInstanceProfile: !Ref InstanceProfile

  # Load Balancer Target Group
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets:
        - Id: !Ref WebServerInstance1
        - Id: !Ref WebServerInstance2

  # Load Balancer Listener
  AppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP

  InstanceConnectEndpointA:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      SubnetId: !Ref SubnetPrivadaA
      SecurityGroupIds:
        - !Ref WebServerSG
      PreserveClientIp: true

  # Base de Datos (RDS MySQL) 
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subred privada para RDS
      SubnetIds:
        - !Ref SubnetPrivadaC
        - !Ref SubnetPrivadaD
      Tags:
        - Key: Name
          Value: DBSubnetGroup

  MySQLDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: 8.0.36
      MasterUsername: !Ref DBMasterUser
      MasterUserPassword: !Ref DBMasterPassword
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: true
      PubliclyAccessible: false
      StorageEncrypted: true
      BackupRetentionPeriod: 7
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: MySQLDatabase

  # CloudWatch Alarm (uso de CPU)
  CPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: HighCPUUtilization
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 300
      Statistic: Average
      Threshold: 80
      AlarmActions: []
      Dimensions:
        - Name: InstanceId
          Value: !Ref WebServerInstance1
  AuditBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref AuditBucketName
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  AuditBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AuditBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowConfigPut
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${AuditBucketName}/config-logs/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Sid: AllowConfigGetAcl
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub arn:aws:s3:::${AuditBucketName}
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub arn:aws:s3:::${AuditBucketName}
          - Sid: AllowCloudTrailPut
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${AuditBucketName}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  # AWS CloudTrail
  TrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/cloudtrail/tfg
      RetentionInDays: 90

  CloudTrailCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudTrailLogsRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudTrailLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                Resource: !GetAtt TrailLogGroup.Arn

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: TFG-CloudTrail
      S3BucketName: !Ref AuditBucket
      IsLogging: true
      IsMultiRegionTrail: true
      IncludeGlobalServiceEvents: true
      EnableLogFileValidation: true
      InsightSelectors:
        - InsightType: ApiCallRateInsight
        - InsightType: ApiErrorRateInsight
      EventSelectors:
        - ReadWriteType: All
          IncludeManagementEvents: true
          DataResources:
            - Type: AWS::S3::Object
              Values:
                - !Sub arn:aws:s3:::${AuditBucketName}/
      CloudWatchLogsLogGroupArn: !GetAtt TrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt CloudTrailCloudWatchLogsRole.Arn

# Salidas 
Outputs:
  LoadBalancerDNSName:
    Description: DNS publico del Application Load Balancer
    Value: !GetAtt AppLoadBalancer.DNSName
    Export:
      Name: ALB-DNS

  RDSEndpoint:
    Description: Endpoint de la base de datos MySQL
    Value: !GetAtt MySQLDatabase.Endpoint.Address
